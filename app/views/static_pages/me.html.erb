<head>
<%= stylesheet_link_tag "me" %>
 
</head>

<!-- Header -->

    <div id="header">
    	<div id="wrap">
    		<h3 id="greeting">Hi! I'm</h3>
        	<h1 id="myname">SZE CHAN</h1>

        	<h2 id="myrole">Creative Technologist</h2>

        	<div id="mywork" href="#" class="btn btn-primary view-projects no-select">View Work</div>
        	<div id="mywork" href="#" class="btn btn-primary view-projects no-select">▼</div>

    	</div>
	</div>

<!-- jQuery Projects Column -->

	<div class="projects">
		<dl>
			<dt>beActionable</dt>
				<dd id="hidden" style="display:none">
					
					<div id="actionable_grid">
			            <div class="actionable_pix">
			                <img src="http://i.imgur.com/KxcdZS6.png" style="width: 400px;">
			            </div>
			            <div class="actionable_pix">
			            	<img src="http://i.imgur.com/5dyy6DO.png?2" style="width: 500px;">
			            </div>
			            <div class="actionable_pix">
			                <img src="http://i.imgur.com/phrP3kX.png" style="width: 400px;">
			            </div>
		        	</div>

		        	<h4>ACTIVE PROJECT</h4>
					<a href="http://www.beactionable.com" target="_tab">www.beactionable.com</a>
					<p>The News You Care About. The Projects That Help.</p>
					<p>Created with Ruby on Rails, HTML, CSS, Git.</p>
				</dd>

			<dt>Fullsight.JS</dt>
				<dd>
					<img src="http://i.imgur.com/uceioEj.png" style="width: 600px;"></br>
					<h4>ACTIVE PROJECT</h4>
					<a href="http://fullsight.herokuapp.com" target="_tab">fullsight.herokuapp.com</a>
					<p>Seamless Inline Video Player</p>
					<p>Created with JavaScript, jQuery, HTML, CSS.</p>
				</dd>

			<dt>California Drought Interactive Infographic</dt>
				<dd>	
					<div>
						<h1 id="d3-title">Drought and Water Use in California</h1>
						<p id="chart">
						<h3 style="text-align: center;">Created with D3.js, HTML, CSS.</h3>
					</div>
				</dd>

			<dt>Pair Recommendation Algorithm</dt>
				<dd>
					<h3>This algorithm sifts through a history of searches, (below as "input") and finds terms that have a high probability of relatedness with the other. 
					</h3>
					<h5>Example: If the output produces "Levi Strauss & Co,JNCO Jean Company" or "Jay-Z,Beyonce", these pairs are less likely to be coincidental and are probably related due to them co-occuring times above N. </h5>
					</br>
					<p>Click run, scroll to the bottom of the code and the algorithm finds the </br>company pairs with the strongest correlation that can be given as recommendations.</p>
					<div>
						<script src="//repl.it/embed/lhD/14.js"></script>
					</div>
					<p>Written in Ruby.</p>
				</dd>

			<dt>Small Business Branding / Design</dt>
				<dd>
					<div id="menu_grid">
			            <div class="menu_pix">
			                <img src="<%= asset_path('menu1.JPG') %>" style="width: 400px;">
			            </div>
			            <div class="menu_pix">
			            	<img src="<%= asset_path('menu2.JPG') %>" style="width: 300px;">
			            </div>
		        	</div>

					<p>Printed Lunch and Dinner menus, business cards, and small business branding for a restaurant in New York City.</p>
					<p>Created with InDesign, Photoshop, and Illustrator.</p>
				</dd>

			<dt>Park 51 Mosque at Ground Zero</dt>
				<dd>
					<div id="park_grid">
			            <div class="park_pix">
			                <img src="<%= asset_path('park1.jpg') %>" style="width: 400px;">
			            </div>
			            <div class="park_pix">
			            	<img src="<%= asset_path('park2.jpg') %>" style="width: 400px;">
			            </div>
			            <div class="park_pix">
			                <img src="<%= asset_path('park3.jpg') %>" style="width: 400px;">
			            </div>
		        	</div>

					<h4>On Permanent Exhibition: Activism NY at the Museum of the City of New York</h4>
					<p>Photojournalism - Spot News Coverage
					</p>
					<p>Tools of the Trade: Canon 7D Digital SLR, Tamron 17-50mm f2.8</p>
				</dd>	

			<dt>Madurai Messenger Magazine</dt>
				<dd>
					<div id="madurai_grid">
			            <div class="madurai_pix">
			                <img src="<%= asset_path('madurai1.jpg') %>" style="width: 300px;">
			            </div>
			            <div class="madurai_pix">
			            	<img src="<%= asset_path('madurai2.jpg') %>" style="width: 400px;">
			            </div>
			            <div class="madurai_pix">
			                <img src="<%= asset_path('madurai3.jpg') %>" style="width: 400px;">
			            </div>
		        	</div>

					<p>Photojournalism - Portraiture and Cultural Reporting in South India.
					</p>
					<p>Tools of the Trade: Canon 7D Digital SLR, Canon 580EXII, Tamron 17-50mm f2.8</p>
				</dd>

			<dt>A Survey of India</dt>
				<dd>
					<div id="survey_grid">
			            <div class="survey_pix">
			                <img src="<%= asset_path('survey1.jpg') %>" style="width: 200px;">
			            </div>
			            <div class="survey_pix">
			            	<img src="<%= asset_path('survey2.jpg') %>" style="width: 200px;">
			            </div>
			            <div class="survey_pix">
			                <img src="<%= asset_path('survey3.jpg') %>" style="width: 200px;">
			            </div>
			            <div class="survey_pix">
			                <img src="<%= asset_path('survey4.jpg') %>" style="width: 200px;">
			            </div>
			            <div class="survey_pix">
			                <img src="<%= asset_path('survey5.jpg') %>" style="width: 200px;">
			            </div>
			            <div class="survey_pix">
			                <img src="<%= asset_path('survey6.jpg') %>" style="width: 200px;">
			            </div>
		        	</div>

					<p>Photojournalism - Documenting Cultures From Half a Dozen Indian States
					</p>
					<p>Tools of the Trade: Canon 7D Digital SLR, Canon 580EXII, Tamron 17-50mm f2.8</p>
				</dd>
		</dl>
	</div>

<!-- Contact Me Footer -->

	<div class="contactbox">
		<div class="contact">
			</br></br></br>
			<h2>Let's Get A Coffee!</h2></br>
			<h4>
			Current Residence:</br>
			Harlem</br>
			New York, USA</br>
			</h4>
			<h4>
			Tel: 347 306 3012</br>
			Email: hello[AT]sze[DOT]codes
			</h4>
			</br>
			<h4>Current Status:</h4>
			<h4>Available For Hire</h4>
		</div>


		<div class="about">
			<h2>About</h2></br>
			<h4>
				Sze Chun Chan (* 1987) is a</br> multidisciplinary programmer</br>and designer in New York City.</br> He is a graduate of Stony Brook</br>University's School of Journalism.</br>
				He was born in Kowloon, Hong Kong.</br></br>
				Current Obsessions:</br>
				The writings of Franco "Bifo" Berardi</br>
				and road cycling.</br>
			</h4>
		</div>


		<div class="copyright">
			<h2>Copyright</h2></br>
			<h4>
				Website and all work within</br>
				is © 2009-2015 by Sze Chan
			</h4>
		</br></br>

	</div>

	<script>

	// Sliders 

	(function(){
		$('dd').filter(':nth-child(n+4)').addClass('hide');
		$('dl').on('click', 'dt', function() {

			if($(this).hasClass('active'))
				$(this).removeClass('active')
					.next()
						.slideUp(200);

			else
			$(this).addClass('active')
				.next()
					.slideDown(200)
					// .siblings('dd')
					// 	.slideUp(200);

		})
	})();

	// End Sliders Code


	// D3 Code 

	var margin = {top: 30, right: 0, bottom: 20, left: 0},
    width = 960,
    height = 600 - margin.top - margin.bottom,
    formatNumber = d3.format(",%"),
    colorDomain = [-.6, 0, .6],
    colorRange = ["#373a93", 'white', "#936638"],
    transitioning;

	// sets x and y scale to determine size of visible boxes
	var x = d3.scale.linear()
	    .domain([0, width])
	    .range([0, width]);

	var y = d3.scale.linear()
	    .domain([0, height])
	    .range([0, height]);

	// adding a color scale
	var color = d3.scale.linear()
	    .domain(colorDomain)
	    .range(colorRange);

	// introduce color scale here

	var treemap = d3.layout.treemap()
	    .children(function(d, depth) { return depth ? null : d._children; })
	    .sort(function(a, b) { return a.value - b.value; })
	    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
	    .round(false);

	var svg = d3.select("#chart").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.bottom + margin.top)
	    .style("margin-left", -margin.left + "px")
	    .style("margin.right", -margin.right + "px")
	  .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	    .style("shape-rendering", "crispEdges");

	// New Tooltips 
	var celldata;
	var tooltip = d3.select("#chart")
	    .append("tooltip")
	    .style("position", "absolute")
	    .style("z-index", "201")
	    .style("visibility", "hidden")
	    .style("width", "200px")
	    .style("padding", "10px")
	    .style("background-color", "orange")
	    .style("pointer-events", "none")
	    .style("-webkit-border-radius", "10px")
	    .style("-moz-border-radius", "10px")
	    .style("border-radius", "5px")
	    .style("-webkit-box-shadow", "4px 4px 10px rgba(0, 0, 0, 0.4)")
	    .style("-mox-box-shadow", "4px 4px 4px 10px rgba(0, 0, 0, 0.4)")
	    .style("box-shadow", "4px 4px 10px rbga(0, 0, 0, 0.4)")
	    .text('tooltip content goes here');

	var grandparent = svg.append("g")
	    .attr("class", "grandparent");

	grandparent.append("rect")
	    .attr("y", -margin.top)
	    .attr("width", width)
	    .attr("height", margin.top);

	grandparent.append("text")
	    .attr("x", 6)
	    .attr("y", 6 - margin.top)
	    .attr("dy", ".75em")

	d3.json("static_pages/data.json", function(error, root) {
	  if (error) return console.warn(error);
	  console.log(root);
	  initialize(root);
	  accumulate(root);
	  layout(root);
	  display(root);

	var legend = d3.select("#legend").append("svg")
	  .attr("width", width + margin.left + margin.right)
	  .attr("height", 30)
	  .attr('class', 'legend')
	  .selectAll("g")
	      .data([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])
	      .enter()
	      .append('g')

	// functions

	function initialize(root) {
	    root.x = root.y = 0;
	    root.dx = width;
	    root.dy = height;
	    root.depth = 0;
	  }

	  // Aggregate the values for internal nodes. This is normally done by the
	  // treemap layout, but not here because of our custom implementation.
	  // We also take a snapshot of the original children (_children) to avoid
	  // the children being overwritten when when layout is computed.
	  function accumulate(d) {
	    return (d._children = d.children)
	      // recursion step, note that p and v are defined by reduce
	        ? d.value = d.children.reduce(function(p, v) {return p + accumulate(v); }, 0)
	        : d.value;
	  }

	  // Compute the treemap layout recursively such that each group of siblings
	  // uses the same size (1×1) rather than the dimensions of the parent cell.
	  // This optimizes the layout for the current zoom state. Note that a wrapper
	  // object is created for the parent node for each group of siblings so that
	  // the parent’s dimensions are not discarded as we recurse. Since each group
	  // of sibling was laid out in 1×1, we must rescale to fit using absolute
	  // coordinates. This lets us use a viewport to zoom.
	  function layout(d) {
	    if (d._children) {
	      // treemap nodes comes from the treemap set of functions as part of d3
	      treemap.nodes({_children: d._children});
	      d._children.forEach(function(c) {
	        c.x = d.x + c.x * d.dx;
	        c.y = d.y + c.y * d.dy;
	        c.dx *= d.dx;
	        c.dy *= d.dy;
	        c.parent = d;
	        // recursion
	        layout(c);
	      });
	    }
	  }

	function colorIncrements(d){
	    return (colorDomain[colorDomain.length - 1] - colorDomain[0])/18*d + colorDomain[0];
	}

	legend.append("rect")
	    .attr("x", function(d){return margin.left + d * 40})
	    .attr("y", 0)
	    .attr("fill", function(d) {return color(colorIncrements(d))})
	    .attr('width', '40px')
	    .attr('height', '40px')


	legend.append("text")
	        .text(function(d){return formatNumber(colorIncrements(d))})
	        .attr('y', 20)
	        .attr('x', function(d){return margin.left + d * 40 + 20});

	// determines if white or black will be better contrasting color
	function getContrast50(hexcolor){
	    return (parseInt(hexcolor.replace('#', ''), 16) > 0xffffff/3) ? 'black':'white';
	}

	  function display(d) {
	    grandparent
	        .datum(d.parent)
	        .on("click", transition)
	      .select("text")
	        .text(name(d))
	        
	    // color header based on grandparent's rate
	    grandparent
	      .datum(d.parent)
	      .select("rect")
	      .attr("fill", function(){console.log(color(d.rate)); return color(d['rate'])})

	    var g1 = svg.insert("g", ".grandparent")
	        .datum(d)
	        .attr("class", "depth");

	    var g = g1.selectAll("g")
	        .data(d._children)
	      .enter().append("g");

	    g.filter(function(d) { return d._children; })
	        .classed("children", true)
	        .on("click", transition);

	    g.selectAll(".child")
	        .data(function(d) { return d._children || [d]; })
	      .enter().append("rect")
	        .attr("class", "child")
	        .call(rect);

	    // Adds Tooltips on Mouseover
	    g.append("rect")
	        .attr("class", "parent")
	        .on("mouseover", function(d){celldata = tooltip.text(d.value + " Million Acre Feet" + ', Percent Change: ' + formatNumber(d.rate));
	                                    return tooltip.style("visibility", "visible") && celldata;
	                                    })
	        .on("mousemove", function(){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
	        .on("mouseout", function(){return tooltip.style("visibility", "hidden");})
	       .call(rect)
	       // .append("title")
	       //   .text(function(d){return (d.name + ', Million Acre Feet of Water: ' + d.value + ', percent change: ' + formatNumber(d.rate));});

	    g.append("text")
	        .attr("dy", ".75em")
	        .text(function(d) { return d.name; })
	        .call(text);

	    function transition(d) {
	      if (transitioning || !d) return;
	      transitioning = true;

	      var g2 = display(d),
	          t1 = g1.transition().duration(750),
	          t2 = g2.transition().duration(750);

	      // Update the domain only after entering new elements.
	      x.domain([d.x, d.x + d.dx]);
	      y.domain([d.y, d.y + d.dy]);

	      // Enable anti-aliasing during the transition.
	      svg.style("shape-rendering", null);

	      // Draw child nodes on top of parent nodes.
	      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

	      // Fade-in entering text.
	      g2.selectAll("text").style("fill-opacity", 0);

	      // Transition to the new view.
	      t1.selectAll("text").call(text).style("fill-opacity", 0);
	      t2.selectAll("text").call(text).style("fill-opacity", 1);
	      t1.selectAll("rect").call(rect);
	      t2.selectAll("rect").call(rect);

	      // Remove the old node when the transition is finished.
	      t1.remove().each("end", function() {
	        svg.style("shape-rendering", "crispEdges");
	        transitioning = false;
	      });
	    }

	    return g;
	  }

	  function text(text) {
	    text.attr("x", function(d) { return x(d.x) + 6; })
	        .attr("y", function(d) { return y(d.y) + 6; })
	        .attr("fill", function (d) {return getContrast50(color(parseFloat(d.rate)))});
	  }

	  function rect(rect) {
	    rect.attr("x", function(d) { return x(d.x); })
	        .attr("y", function(d) { return y(d.y); })
	        .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
	        .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); })
	        .attr("fill", function(d){return color(parseFloat(d.rate));});
	  }

	  function name(d) {
	    return d.parent
	        ? name(d.parent) + "." + d.name
	        : d.name;
	  }
	});

	// End D3 Code

	</script>
